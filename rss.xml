<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Taewoo Kim]]></title><description><![CDATA[Every Little Things.]]></description><link>https://taewoo.com</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 04 Oct 2020 05:24:40 GMT</lastBuildDate><item><title><![CDATA[Emacs]]></title><description><![CDATA[Emacs 시작하기 Emacs…]]></description><link>https://taewoo.com/emacs/</link><guid isPermaLink="false">https://taewoo.com/emacs/</guid><pubDate>Sun, 19 Apr 2020 08:55:54 GMT</pubDate><content:encoded>&lt;h1&gt;Emacs 시작하기&lt;/h1&gt;
&lt;p&gt;Emacs를 적응하기 위해 아래와 같은 단계를 밟았고 개인적으로는 아래의 단계가 적절하다고 본다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;바닐라 이맥스 사용해보기. 설치, 버퍼전환, 파일열기, 이동하기 편집하기&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;플러그인 하나씩 설치해보기. 좀더 편리하게 이맥스를 사용해줄수 있는 플러그인을 설치한다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;텍스트 에티터로 사용할때 편리한 플러그인      &lt;/li&gt;
&lt;li&gt;헤르음&lt;/li&gt;
&lt;li&gt;flycheck&lt;/li&gt;
&lt;li&gt;개발툴로 사용할때 편리한 플러그인들 &lt;/li&gt;
&lt;li&gt;Projectile&lt;/li&gt;
&lt;li&gt;헤르음-프로젝타일&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;현재 여기까지 진행되었다. 여전히 풀타임 개발툴로 사용하기에는 부족함이 있다. 이맥스를 써보기 위해 한 2년간에 걸쳐 중간중간 시도를 해봤으나 매번 실패를 했다.
도데체 왜 이런기능이 있는 것이며, 왜 이런기능은 없는 것이며, 이해가 안가는게 한두개가 아니였다. 현재로서는 풀타임 에디터로도 아직 못쓰고 있으나 이전보다는
훨씬 편해졌으며, 약간의 재미를 느끼는 중이다.&lt;/p&gt;
&lt;p&gt;이맥스를 사용하려고 생각하게 된 계기&lt;/p&gt;
&lt;p&gt;그동안 윈도우-&gt;리눅스-&gt;맥-&gt;리눅스-&gt;맥 으로 OS가 바뀌고 언어가 바뀌면서 개발툴이 바뀌고 자바 -&gt; JS -&gt; 고랭 그러면서
다시 개발툴도 바뀌고 개발툴은 그대로 두면서 OS를 왔다갔다하면서 플랫폼 독립적인 툴마저도 항상 키 바인딩이 다르거나 하는 사소한 문제로 이맥스를 써보면 괜찮아질까
하는 생각이 들었다. 현재로서는 GoLand가 워낙 편의성이 강력해서 GoLand를 메인툴로 사용할것이 명확하나 앞으로 투자의 차원에서 이맥스는 조금씩 써가려고 한다.
또한 기본 이맥스 키바인드가 의외로 여러곳에서 차용이 되기 때문에 이맥스 키 바인딩에 익숙해지면 생각보다 편리함을 소소하게 다른툴에서도 찾을수 있다.
그리고 GoLand에서조차 기본적으로 이맥스 키바인드가 소소하게 껴들어가 있는곳이 많고, 키바인드가 설정안되어 있다면 이맥스에서 보통 쓰이는 키바인드를 설정해두는것이
일관성을 갖기에 사용하기 편리하다. 예를 들어 창 나누기는 기능은 있으나 숏컷키는 설정이 안되어있으나 이맥에서는 C-x 3이라는 키 바인딩이 이미 존재하니 이 키바인딩에
이미 익숙해 있다면 고랜드에서 이 키바인드를 VSCode에서도 이 키바인드를 설정해두면 편리하다.  &lt;/p&gt;
&lt;h2&gt;바닐라 이맥스 사용해보기.&lt;/h2&gt;
&lt;h3&gt;설치&lt;/h3&gt;
&lt;p&gt;MacOS기준으로 한다.&lt;/p&gt;
&lt;p&gt;Brew를 사용하기도 하고 여러가지 방법이 있으나 아래의 사이트에서 다운받아서 설치 하는것이 제일 편리했다.  &lt;a href=&quot;https://emacsformacosx.com/&quot;&gt;https://emacsformacosx.com/&lt;/a&gt;
다운받아서 설치하면 됨. &lt;/p&gt;
&lt;h3&gt;신규 파일 작성하기&lt;/h3&gt;
&lt;p&gt;신규 파일 열기
타이핑 하기
수정하기
커서 상하좌우 이동(글자단위, 단어단위)
줄의 맨앞/뒤로 가기
화면단위로 이동하기
삭제하기(글자단위, 단어단위)
선택하기, 지우기
복사하기, 붙여넣기
저장하기&lt;/p&gt;
&lt;h3&gt;기존 파일 수정하기&lt;/h3&gt;
&lt;p&gt;폴더 네비게이션하기
버퍼간 전환히기
최근파일 불러오기
수정하기
저장하기&lt;/p&gt;
&lt;h3&gt;도움받기&lt;/h3&gt;
&lt;p&gt;명령어 검색하기
단축키 검색하기&lt;/p&gt;
&lt;h3&gt;간단한 이맥스 기본 개념 또는 정의&lt;/h3&gt;
&lt;p&gt;간단하게 다음의 개념이 있는데 실제 사용하면서 익숙해지도록 한다. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;버퍼: 버퍼란 일반적인 에디터에서 하나의 파일 또는 아직은 미저장된 파일이라고 생각하면 거의 근접하다. 이맥스에서는 도움말창도 버퍼, 임시작성창 버퍼(스크래치 버퍼), 파일목록 띄어주는 창(Dired) 도 버퍼, 모든것이 버퍼이다.&lt;/li&gt;
&lt;li&gt;윈도우 : 전체 윈도우가 아니라 일반적인 에디터로 치면 탭하나하나가 모두 윈도우이다. 일반적인 에디터에서의 윈도우 인스턴스는 프레임이라고 한다. &lt;/li&gt;
&lt;li&gt;명령어 : 이맥스는 모든 기능이 명령어로 되어있고, 해당 명령어에 단축키가 부여되어 있는 방식이다. 이맥스에서 쓸수 있는 모든 기능은 명령어를 검색할수 있다. 즉 심지어는 커서이동 조차도 명령어로 정의되어 있다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Docker]]></title><description><![CDATA[Docker Minimum Viable Usage Install docker - linux The usage Run my applicaton on container Run mysql on docker. You can run Mysql without…]]></description><link>https://taewoo.com/docker/</link><guid isPermaLink="false">https://taewoo.com/docker/</guid><pubDate>Sun, 19 Apr 2020 08:47:10 GMT</pubDate><content:encoded>&lt;h1&gt;Docker&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#minimum-viable-usage&quot;&gt;Minimum Viable Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#install-docker---linux&quot;&gt;Install docker - linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#the-usage&quot;&gt;The usage&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#run-my-applicaton-on-container&quot;&gt;Run my applicaton on container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#run-mysql-on-docker-you-can-run-mysql-without-installing-locally&quot;&gt;Run mysql on docker. You can run Mysql without installing locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-redis-without-installing-it-locally&quot;&gt;Using Redis without installing it locally&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#using-jekyll-without-installing-it-locally&quot;&gt;Using Jekyll without installing it locally&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#recap&quot;&gt;Recap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Minimum Viable Usage&lt;/h2&gt;
&lt;p&gt;제품을 만들때 MVP가 있는것처럼 툴도 복잡하게 사용하기 이전에 최소한의 설정으로 우선 실행 시켜볼수 있는것이 필요하다.
도커는 여러가지 자유로운 사용법 때문에 처음 접하게 되는 사용자는 오히려 혼란스럽기만 할수 있는데 제일 간단한 버젼의
설정 방법만 알고 일단 실행해 본다면 오히려 더 빨리 이해할수 있다. 아래 기술해 놓은 명령어를 따라하기만 하면 도커는 이미 실행되고 있다.&lt;/p&gt;
&lt;h2&gt;Install docker - linux&lt;/h2&gt;
&lt;p&gt;설치는 모든 것이 그렇듯이 APT로 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/install/linux/docker-ce/ubuntu/&quot;&gt;도커설치하기&lt;/a&gt; 다른 OS도 해당링크에 가면 모두 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;기본설정&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ sudo apt-get remove docker docker-engine docker.io containerd runc  # 기존 설치되어있을수 있는 올드버젼을 선삭제
$ sudo apt-get update                                                 # apt 패키지 인덱스 업데이트. 패키지 다운받기전 항상 수행하는 명령어이므로 도커와 직접적인 상관없음
$ sudo apt-get install \                                              # apt 가 https 연결을 사용할수 있도록 관련 유틸 설치
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg-agent \
    software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -  # 도커 오피셜 GPG 키 설치
$ sudo add-apt-repository \                                                     # 도커 리파지토리 등록 이곳에 최신버젼들이 있음
   &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;도커설치&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;도커 설치 확인&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;$ sudo docker run hello-world&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The usage&lt;/h2&gt;
&lt;h3&gt;Run my applicaton on container&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;내가 갖고 있는 노드 어플리케이션 최상단 폴더에 Dockerfile 한개 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;dockerfile&quot;&gt;&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;9.8&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine                  &lt;span class=&quot;token comment&quot;&gt;# 사용할 기본 이미지, 노드 기본설치되어있음 ( 타 프레임웍도 찾아보면 해당 이미지 있음)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;COPY&lt;/span&gt; . /var/lib/my&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;service/           &lt;span class=&quot;token comment&quot;&gt;# 내 소스를 복사함 ( 도커 컨테이너 안에서 사용할 폴더에 내 소스를 복사 폴더는 원하는 대로 설정하면 됨)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;WORKDIR&lt;/span&gt; /var/lib/my&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;service           &lt;span class=&quot;token comment&quot;&gt;# 작업 폴더 설정 ( 위에서 지정한 폴더를 워크디렉토리로 설정 )&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;EXPOSE&lt;/span&gt; 3000                           &lt;span class=&quot;token comment&quot;&gt;# 외부에 오픈할 포트 (노드 어플리케이션에서 쓰는 포트임. 타 프레임웍은 원하는 포트 오픈)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; npm install                       &lt;span class=&quot;token comment&quot;&gt;# 노드 관련 ( 타 프레임웍은 최초 설치 해당 명령어 수행하면 됨 )&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;ENTRYPOINT&lt;/span&gt; npm start                  &lt;span class=&quot;token comment&quot;&gt;# 노드 어플리케이션 관련 명령어 ( 어플리케이션 기동 명령어 )&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;이미지 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;docker build -t any-image-name-you-want .     # 위의 Dockerfile을 참조하여 내 어플리케이션을 포함하고 있는 이미지를 만듬.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;실행&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -p 3000:3000 image-name-you-created       # 전단계에서 만들어진 이미지를 실행! 끝&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;벌써 도커는 실행중이다. 한번 만들어진 이미지는 계속적으로 쓸수 있기 때문에 step 3의 명령어만 반복적으로 수행하면 된다.&lt;/p&gt;
&lt;h3&gt;Run mysql on docker. You can run Mysql without installing locally&lt;/h3&gt;
&lt;p&gt;1,2번의 단계를 누군가가 나대신 이미 수행하여 만들어진 이미지를 업로드 해놨다. 나는 가져다가 쓰기만 하면 된다. 기본적으로 step 3만 실행하면 되는것인데, 다만
1,2번 대신 다운로드 명령 필요하다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;다운로드 (전 단계에서 내가 직접 이미지를 만들었지만. 여기서는 이미 만들어진 이미지를 다운로드한다. 결과적으로 1,2번을 대체)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;docker pull mysql&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;실행&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;docker run -it mysql&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이제 끝. mySql을 이제 사용할수 있다. workbench 를 실행해서 mysql에 접속이 가능하다.&lt;/p&gt;
&lt;h3&gt;Using Redis without installing it locally&lt;/h3&gt;
&lt;h3&gt;Using Jekyll without installing it locally&lt;/h3&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;내가 만든 어플리케이션을 도커로 실행하기 위해서 최저 필요 조건 딱 하나 : Dockerfile&lt;/li&gt;
&lt;li&gt;도커파일은 기본적으로&lt;/li&gt;
&lt;li&gt;기존 이미지를 가져옴 ( 예. 알파인 리눅스, 우분투 리눅스, 노드가 기본으로 설치되어있는 리눅스 )&lt;/li&gt;
&lt;li&gt;오픈할 포트 지정 (보통 포트 3000 )&lt;/li&gt;
&lt;li&gt;내 어플리케이션을 실행할 명령어를 실행하면 됨 (npm install, npm start)&lt;/li&gt;
&lt;li&gt;남이 만든 도커 이미지 간단히 쓸수 있음. 그들이 이미 Dockerfile를 작성해서 이미지 생성후 올려놓은것을 그냥 가져다 쓰는것임&lt;/li&gt;
&lt;li&gt;좀더 편하게 쓰려면 docker-compose 를 써도 됨 : 도커 명령어 수행시 여러가지 옵션을 저장해두고 쓸수 있음. Dockerfile의 성격에 익숙해지면 docker-compose도 금방 익숙해짐. 한번에 알필요없음&lt;/li&gt;
&lt;li&gt;그 다음은 도커스웜/쿠버네티스. 하지만 기본은 언제나 Dockerfile&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item></channel></rss>